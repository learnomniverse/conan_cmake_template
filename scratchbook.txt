1) lancia server in debug_serving_server cosÃ¬ fai prima niente downloads
    python3 server.py

2) disinstalla eventuali deps
    conan remove -c kit_sdk ; conan remove -c nv_usd ; conan remove -c carb_sdk ; conan remove -c pybind11 ; conan remove -c python

3) Prima vanno installate le dipendenze..
    ./deps/install_all_deps.sh

4) Poi vanno generati i toolchain per le deps nela main dir del repo
    rm -rf _compiler/* && conan install . --output-folder _compiler

5) Ora tutto cmake!
    cd _compiler && clear && rm -rf ../_build/* && cmake --preset conan-release ..

6) A questo punto hai il makefile!
    cmake --build . --config Release




Usa
    $ ./tools/packman/packman list kit-sdk -r packman:cloudfront -st
se serve elencarli per aggiornare le conanrecipes. | grep tcbuildnumber per maggiore precisione.

per l'md5 per aggiornare le mappe:
    echo "kit-sdk@105.1.0+release.51.a7407fb5.tc.windows-x86_64.release.7z" | sed 's/@/%40/g; s/+/%2B/g; s/\./%2E/g' | xargs -I {} wget -O - "https://d4i3qtqj3r0z5.cloudfront.net/{}" | md5sum



https://d4i3qtqj3r0z5.cloudfront.net/kit-sdk@105.1.0+release.51.a7407fb5.tc.windows-x86_64.release.7z

---------------------








alex@nvbox:~/conan_cmake_template$ conan profile detect
detect_api: Found gcc 11
detect_api: gcc>=5, using the major as version
detect_api: gcc C++ standard library: libstdc++11

Detected profile:
[settings]
arch=x86_64
build_type=Release
compiler=gcc
compiler.cppstd=gnu17
compiler.libcxx=libstdc++11
compiler.version=11
os=Linux

WARN: This profile is a guess of your environment, please check it.
WARN: The output of this command is not guaranteed to be stable and can change in future Conan versions.
WARN: Use your own profile files for stability.
Saving detected profile to /home/alex/.conan2/profiles/default
alex@nvbox:~/conan_cmake_template$


# build AND install in "package" subdirs immediately whatever conanfile.py is contained int he 'deps/kit-sdk' dir
conan create deps/kit-sdk
(
another less useful command:
    # do not build but keep in cache downloaded, will build at the first use
    conan export .
)

# used not for building packages but for GATHERING and INSTALLING (if needed) DEPS of APPS - need another conanfile.py
# use THIS for the main app conanfile.py
conan install . --output-folder _compiler


# finally use cmake as set up by conan
cd build && cmake --preset conan-release ..